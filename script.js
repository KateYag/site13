window.onload = () => {
    const firstLoader = document.querySelector('.first-loader');
    const secondLoader = document.querySelector('.second-loader');
    const content = document.querySelector('.content'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º

    // –ü–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
    firstLoader.style.display = 'flex';

    // –ü–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
    setTimeout(() => {
        firstLoader.style.display = 'none';
        secondLoader.style.display = 'flex';
    }, 3000); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–≤—ã–π

    // –ü–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ–±–∞ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    setTimeout(() => {
        secondLoader.style.display = 'none';
        content.classList.add('visible'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    }, 6000); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–π 3 —Å–µ–∫—É–Ω–¥—ã
};





document.querySelector(".wedding-form").addEventListener("submit", async function (e) {
    e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

    // üîπ –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï!
    const TOKEN = "7598391331:AAEhteo0bVsAe5-8XVbvQxk7AX-inJNdDxw";
    const CHAT_ID = "636373910";
    const API_URL = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

    const fieldNames = {
        attendance: "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ",
        fullname: "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è",
        drink: "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º",
        wishes: "–ü–æ–∂–µ–ª–∞–Ω–∏—è",
    };
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const formData = new FormData(this);
    let message = "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–≤–∞–¥—å–±—É üéâ</b>\n\n";
    let drinks = [];

    for (let [key, value] of formData.entries()) {
        if (key === "drink") {
            drinks.push(value); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        } else {
            let fieldName = fieldNames[key] || key;
            message += `<b>${fieldName}:</b> ${value}\n`;
        }
    }
    if (drinks.length > 0) {
        message += `<b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º:</b> ${drinks.join(", ")}\n`;
    }
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram
    const response = await fetch(API_URL, {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({
            chat_id: CHAT_ID,
            text: message,
            parse_mode: "HTML",
        }),
    });

    if (response.ok) {
        alert("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        this.reset(); // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
});

function startCountdown(targetDate) {
    function updateCountdown() {
        const now = new Date().getTime();
        const timeLeft = targetDate - now;

        if (timeLeft <= 0) {
            document.getElementById("countdown").innerHTML = "–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!";
            clearInterval(interval);
            return;
        }

        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

        document.getElementById("days").textContent = days;
        document.getElementById("hours").textContent = hours;
        document.getElementById("minutes").textContent = minutes;
        document.getElementById("seconds").textContent = seconds;
    }

    updateCountdown();
    const interval = setInterval(updateCountdown, 1000);
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
const targetDate = new Date("April 25, 2025 12:00:00").getTime();
startCountdown(targetDate);



document.addEventListener("DOMContentLoaded", () => {
    const hiddenElements = document.querySelectorAll(".hidden");

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });

    hiddenElements.forEach(element => observer.observe(element));
});

document.addEventListener("DOMContentLoaded", () => {
    const hiddenElements = document.querySelectorAll(".hid");

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });

    hiddenElements.forEach(element => observer.observe(element));
});


document.addEventListener("DOMContentLoaded", function () {
    const parallax = document.querySelector(".parallax-bg");

    window.addEventListener("scroll", function () {
        let scrollPosition = window.scrollY;
        parallax.style.transform = `scale(1.1) translateY(${scrollPosition * 0.2}px)`;
    });
});





